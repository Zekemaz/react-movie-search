{"version":3,"sources":["movie.module.css","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","props","className","style","card","src","image","alt","title","cardImage","cardInfo","cardTitle","cardDesc","overview","cardPopularity","popularity","cardRelease","release","cardRating","rating","App","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","console","log","results","error","onSubmit","type","name","placeholder","value","onChange","target","onClick","alert","filter","movie","poster_path","map","key","id","vote_average","release_date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,SAAW,wBAAwB,UAAY,yBAAyB,SAAW,wBAAwB,eAAiB,8BAA8B,YAAc,2BAA2B,WAAa,4B,qNCmBnRC,EAhBD,SAACC,GACX,OACI,yBAAKC,UAAWC,IAAMC,MAClB,yBAAKC,IAAG,0DAAqDJ,EAAMK,OACnEC,IAAKN,EAAMO,MAAQ,SAAUN,UAAWC,IAAMM,YAC9C,yBAAKP,UAAWC,IAAMO,UAClB,wBAAIR,UAAWC,IAAMQ,WAAYV,EAAMO,OACvC,uBAAGN,UAAWC,IAAMS,UAAWX,EAAMY,UACrC,uBAAGX,UAAWC,IAAMW,gBAApB,eAAiDb,EAAMc,YACvD,uBAAGb,UAAWC,IAAMa,aAApB,iBAAgDf,EAAMgB,SACtD,uBAAGf,UAAWC,IAAMe,YAApB,WAAyCjB,EAAMkB,WCThD,SAASC,IAAK,MAGDC,mBAAS,IAHR,mBAGpBC,EAHoB,KAGbC,EAHa,OAKCF,mBAAS,IALV,mBAKpBG,EALoB,KAKZC,EALY,KASrBC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAEIC,EAHW,kHAGsGR,EAHtG,iDAMKS,MAAMD,GANX,cAMPE,EANO,gBAOOA,EAAIC,OAPX,OAOPC,EAPO,OAQbC,QAAQC,IAAIF,EAAKG,SACjBZ,EAAUS,EAAKG,SATF,kDAWbF,QAAQG,MAAR,MAXa,QAajBf,EAAS,IAbQ,0DAAH,sDAwBlB,OACE,yBAAKrB,UAAU,aACb,wBAAIA,UAAU,SAAd,sBAEA,0BAAMA,UAAU,OAAOqC,SAAUb,GAC/B,2BAAOxB,UAAU,QAAQsC,KAAK,OAAOC,KAAK,QAC1CC,YAAY,qBACZC,MAAOrB,EAAOsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAEjD,4BAAQzC,UAAU,SAAS4C,QAjBjB,SAACnB,GACJ,KAARL,IACDK,EAAEE,iBACFkB,MAAM,8BAcyCP,KAAK,UAAlD,WAEF,yBAAKtC,UAAU,aACZsB,EAAOwB,QAAO,SAAAC,GAAK,OAAIA,EAAMC,eAAaC,KAAI,SAAAF,GAAK,OAClD,kBAAC,EAAD,CACMG,IAAKH,EAAMI,GACX7C,MAAOyC,EAAMzC,MACbK,SAAUoC,EAAMpC,SAChBE,WAAYkC,EAAMlC,WAClBI,OAAQ8B,EAAMK,aACdrC,QAASgC,EAAMM,aACfjD,MAAO2C,EAAMC,mBC9CTM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLH,QAAQG,MAAMA,EAAMmC,c","file":"static/js/main.a1747ed3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"movie_card__17Tmy\",\"cardImage\":\"movie_cardImage__3AqPy\",\"cardInfo\":\"movie_cardInfo__23kMQ\",\"cardTitle\":\"movie_cardTitle__i7jQd\",\"cardDesc\":\"movie_cardDesc__1j39k\",\"cardPopularity\":\"movie_cardPopularity__227m9\",\"cardRelease\":\"movie_cardRelease__1XSfu\",\"cardRating\":\"movie_cardRating__1zAW-\"};","import React from 'react';\nimport style from './movie.module.css'\n\n\nconst Movie = (props) => {\n    return(\n        <div className={style.card}>\n            <img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${props.image}`} \n            alt={props.title + 'poster'} className={style.cardImage}/>\n            <div className={style.cardInfo}>\n                <h2 className={style.cardTitle}>{props.title}</h2>\n                <p className={style.cardDesc}>{props.overview}</p>\n                <p className={style.cardPopularity}>Popularity: {props.popularity}</p>\n                <p className={style.cardRelease}>Release date: {props.release}</p>\n                <p className={style.cardRating}>Rating: {props.rating}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Movie;\n\n","import React, {useState} from \"react\";\nimport './App.css';\nimport Movie from \"./Movie\";\n\n\nexport default function App(){\n    \n  //states- input query, movies\n  const [query, setQuery] = useState('');\n  //create the state for movies, and update that state appropriate\n  const [movies, setMovies] = useState([]);\n\n\n\n  const searchMovies = async (e) => {\n      e.preventDefault();\n              \n      const url = `https://api.themoviedb.org/3/search/movie?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&query=${query}&page=1&include_adult=false`;\n      \n      try {\n          const res = await fetch(url);\n          const data  = await res.json();\n          console.log(data.results);\n          setMovies(data.results);\n      }catch(err){\n          console.error(err);\n      }\n      setQuery('');\n  }\n\n  const onClick = (e) => {\n    if(query===''){\n      e.preventDefault()\n      alert('Please type a movie name')\n        \n    }\n  }\n  \n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">React Movie Search</h1>\n\n      <form className=\"form\" onSubmit={searchMovies}>\n        <input className=\"input\" type=\"text\" name=\"query\"\n        placeholder=\"i.e. Jurassic Park\"\n        value={query} onChange={(e) => setQuery(e.target.value)}\n        />\n        <button className=\"button\" onClick={onClick} type=\"submit\">Search</button>\n      </form>\n      <div className=\"card-list\">\n        {movies.filter(movie => movie.poster_path).map(movie =>(\n          <Movie \n                key={movie.id}\n                title={movie.title} \n                overview={movie.overview} \n                popularity={movie.popularity}\n                rating={movie.vote_average}\n                release={movie.release_date}\n                image={movie.poster_path}\n          />\n        ))}\n      </div>\n\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}